from argparse import ArgumentParser
from pathlib import Path

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

# file to save generated code to
source_file = Path(__file__).parent.parent.resolve() / "sigmoidcolon" / "functional.py"


def template(z):
    n = len(z)
    s = [f"{z[i]} * x ** {n - i - 1}" for i in range(n - 1)]
    s.append(str(z[-1]))
    return f"""# Do not edit, autogenerated by scripts/codegen.py
import torch

def sigmoidcolon(x):
    return {' + '.join(s)}
    
    """


def main(args):
    img = Image.open(args.image)

    a = np.asarray(img)

    plt.imshow(a)
    print(
        f"Select {args.num_keypoints} keypoints on image. You will know you are done when they all disappear."
    )
    keypoints = plt.ginput(args.num_keypoints)
    plt.show()

    # sort keypoints by x coord
    keypoints = sorted(keypoints, key=lambda xy: xy[0])
    keypoints = np.array(keypoints)

    x, y = keypoints.T
    z = np.polyfit(x, y, args.degree)

    xp = np.linspace(start=0, stop=a.shape[1], num=200)
    yp = np.poly1d(z)(xp)

    idx = (yp >= 0) & (yp < a.shape[0])

    plt.imshow(a)
    plt.plot(xp[idx], yp[idx], color="red")
    plt.show()

    print("Save? [y/n]")
    if input() == "y":
        with open(source_file, "w") as f:
            f.write(template(z))
        print(f"Saved to {source_file}")
    else:
        print("Exiting")


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("image")
    parser.add_argument("--degree", type=int, default=3)
    parser.add_argument("--num_keypoints", type=int, default=20)
    args = parser.parse_args()
    main(args)
